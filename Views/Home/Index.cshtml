@model string
@{
    ViewData["Title"] = "Home Page";
}

<article class="tracking container flex-row">
    <section class="flex-col">
        <small id="payload-info"></small>
        <img class="invert small-icon" src="./img/postman_icon.svg" alt="postman icon">
    </section>
</article>

@section Scripts {
    <script>
        let payloadInterval;
        let lastReceivedPayload = "";

        async function updateSubscribtion(topic) {
            const response = await fetch(`/Home/UpdateSubscribtion?topic=${topic}`);
            clearInterval(payloadInterval); // Clear the interval timer
            payloadInterval = setInterval(updatePayload, 500); // Set a new interval timer
            updatePayload(); // Update payload immediately after subscription update
        }

        function updatePayload() {
            fetch('/Home/GetPayload')
                .then(response => response.text())
                .then(payload => {
                    const root = document.documentElement;
                    const searchBarValue = document.getElementById("parcel-search-bar").value;

                    if (payload == "0" && lastReceivedPayload != "0") {
                        showNonPersistentNotification("Parcel Update", "Parcel is at distribution center");
                        document.getElementById("payload-info").innerText = "Parcel is at distribution center";
                        document.getElementById("payload-info").className = "";
                        root.style.setProperty('--parcel-length-percentage', `0%`);
                    } else if (payload == "1" && lastReceivedPayload != "1") {
                        showNonPersistentNotification("Parcel Update", "Parcel is out for delivery");
                        document.getElementById("payload-info").innerText = "Parcel is out for delivery";
                        document.getElementById("payload-info").className = "";
                        root.style.setProperty('--parcel-length-percentage', `50%`);
                    } else if (payload == "2" && lastReceivedPayload != "2") {
                        showNonPersistentNotification("Parcel Update", "Parcel is delivered");
                        document.getElementById("payload-info").innerText = "Parcel is delivered";
                        document.getElementById("payload-info").className = "";
                        root.style.setProperty('--parcel-length-percentage', `100%`);
                    } else {
                        document.getElementById("payload-info").innerText = "Parcel not found!";
                        document.getElementById("payload-info").className = "invalid";
                        root.style.setProperty('--parcel-length-percentage', `50%`);
                    }

                    lastReceivedPayload = payload;
                });
        }

        function searchIconPressed() {
            const searchBarValue = document.getElementById("parcel-search-bar").value;

            // Call updateSubscribtion with the topic
            if (searchBarValue) {
                updateSubscribtion(searchBarValue);
            } else {
                showNonPersistentNotification("Error", "Cannot search for '', please specify a package id");
            }
        }
    </script>
}
